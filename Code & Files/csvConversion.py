import pefile
import hashlib
import json
import math
import os
import pandas as pd
import pickle


def calculate_entropy(data):
    if len(data) == 0:
        return 0
    
    if isinstance(data, str):
        data = data.encode('utf-8')

    entropy = 0
    for x in range(256):
        p_x = float(data.count(x.to_bytes(1, 'big'))) / len(data)
        if p_x > 0:
            entropy += - p_x * math.log(p_x, 2)
    return entropy


def extract_metadata(filepath):
    pe = pefile.PE(filepath)

    with open("saveModel.pkl", "rb") as f:
        model, select, data_train, data_test, value_train, value_test , mean_features = pickle.load(f)

    keys = ['Name', 'md5', 'Machine', 'SizeOfOptionalHeader', 'Characteristics',       'MajorLinkerVersion', 'MinorLinkerVersion', 'SizeOfCode',       'SizeOfInitializedData', 'SizeOfUninitializedData',       'AddressOfEntryPoint', 'BaseOfCode', 'BaseOfData', 'ImageBase',       'SectionAlignment', 'FileAlignment', 'MajorOperatingSystemVersion',       'MinorOperatingSystemVersion', 'MajorImageVersion', 'MinorImageVersion',       'MajorSubsystemVersion', 'MinorSubsystemVersion', 'SizeOfImage',       'SizeOfHeaders', 'CheckSum', 'Subsystem', 'DllCharacteristics',       'SizeOfStackReserve', 'SizeOfStackCommit', 'SizeOfHeapReserve',       'SizeOfHeapCommit', 'LoaderFlags', 'NumberOfRvaAndSizes', 'SectionsNb',       'SectionsMeanEntropy', 'SectionsMinEntropy', 'SectionsMaxEntropy',       'SectionsMeanRawsize', 'SectionsMinRawsize', 'SectionMaxRawsize',       'SectionsMeanVirtualsize', 'SectionsMinVirtualsize',       'SectionMaxVirtualsize', 'ImportsNbDLL', 'ImportsNb',       'ImportsNbOrdinal', 'ExportNb', 'ResourcesNb', 'ResourcesMeanEntropy',       'ResourcesMinEntropy', 'ResourcesMaxEntropy', 'ResourcesMeanSize',       'ResourcesMinSize', 'ResourcesMaxSize', 'LoadConfigurationSize',       'VersionInformationSize']

    result = {}
    result["Name"] = os.path.basename(filepath)

    # Calculate the md5 hash of the file
    with open(filepath, 'rb') as f:
        content = f.read()
        result['md5'] = hashlib.md5(content).hexdigest()

    for i in range(2, 56):
        result[keys[i]] = mean_features[i-2]
        # print(result)
    
    # Extract metadata from the IMAGE_FILE_HEADER structure
    try:
        result["Machine"] = pe.FILE_HEADER.Machine
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["SizeOfOptionalHeader"] = pe.FILE_HEADER.SizeOfOptionalHeader
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["Characteristics"] = pe.FILE_HEADER.Characteristics
    except Exception as e:
        print(f"Error: {e}")
    
    # Extract metadata from the IMAGE_OPTIONAL_HEADER structure (32-bit)
    try:
        result["MajorLinkerVersion"] = pe.OPTIONAL_HEADER.MajorLinkerVersion
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["MinorLinkerVersion"] = pe.OPTIONAL_HEADER.MinorLinkerVersion
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["SizeOfCode"] = pe.OPTIONAL_HEADER.SizeOfCode
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["SizeOfInitializedData"] = pe.OPTIONAL_HEADER.SizeOfInitializedData
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["SizeOfUninitializedData"] = pe.OPTIONAL_HEADER.SizeOfUninitializedData
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["AddressOfEntryPoint"] = pe.OPTIONAL_HEADER.AddressOfEntryPoint
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["BaseOfCode"] = pe.OPTIONAL_HEADER.BaseOfCode
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result["BaseOfData"] = pe.OPTIONAL_HEADER.BaseOfData
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["ImageBase"] = pe.OPTIONAL_HEADER.ImageBase
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["SectionAlignment"] = pe.OPTIONAL_HEADER.SectionAlignment
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["FileAlignment"] = pe.OPTIONAL_HEADER.FileAlignment
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["MajorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MajorOperatingSystemVersion
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["MinorOperatingSystemVersion"] = pe.OPTIONAL_HEADER.MinorOperatingSystemVersion
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["MajorImageVersion"] = pe.OPTIONAL_HEADER.MajorImageVersion
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["MinorImageVersion"] = pe.OPTIONAL_HEADER.MinorImageVersion
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["MajorSubsystemVersion"] = pe.OPTIONAL_HEADER.MajorSubsystemVersion
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["MinorSubsystemVersion"] = pe.OPTIONAL_HEADER.MinorSubsystemVersion
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["SizeOfImage"] = pe.OPTIONAL_HEADER.SizeOfImage
    except Exception as e:
        print(f"Error: {e}")

    try:
        result["SizeOfHeaders"] = pe.OPTIONAL_HEADER.SizeOfHeaders
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['CheckSum'] = pe.OPTIONAL_HEADER.CheckSum
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['Subsystem'] = pe.OPTIONAL_HEADER.Subsystem
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['DllCharacteristics'] = pe.OPTIONAL_HEADER.DllCharacteristics
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SizeOfStackReserve'] = pe.OPTIONAL_HEADER.SizeOfStackReserve
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SizeOfStackCommit'] = pe.OPTIONAL_HEADER.SizeOfStackCommit
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SizeOfHeapReserve'] = pe.OPTIONAL_HEADER.SizeOfHeapReserve
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SizeOfHeapCommit'] = pe.OPTIONAL_HEADER.SizeOfHeapCommit
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['LoaderFlags'] = pe.OPTIONAL_HEADER.LoaderFlags
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['NumberOfRvaAndSizes'] = pe.OPTIONAL_HEADER.NumberOfRvaAndSizes
    except Exception as e:
        print(f"Error: {e}")
    
    sections = [section for section in pe.sections]
    try:
        result['SectionsNb'] = len(sections)
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result['SectionsMeanEntropy'] = sum([section.get_entropy() for section in sections]) / len(sections)
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SectionsMinEntropy'] = min([section.get_entropy() for section in sections])
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SectionsMaxEntropy'] = max([section.get_entropy() for section in sections])
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SectionsMeanRawsize'] = sum([section.SizeOfRawData for section in sections]) / len(sections)
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SectionsMinRawsize'] = min([section.SizeOfRawData for section in sections])
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SectionMaxRawsize'] = max([section.SizeOfRawData for section in sections])
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SectionsMeanVirtualsize'] = sum([section.Misc_VirtualSize for section in sections]) / len(sections)
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SectionsMinVirtualsize'] = min([section.Misc_VirtualSize for section in sections])
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['SectionMaxVirtualsize'] = max([section.Misc_VirtualSize for section in sections])
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['ImportsNbDLL'] = len(pe.DIRECTORY_ENTRY_IMPORT)
    except Exception as e:
        print(f"Error: {e}")

    try:
        result['ImportsNb'] = sum([len(entry.imports) for entry in pe.DIRECTORY_ENTRY_IMPORT])
    except Exception as e:
        print(f"Error: {e}")
    
    try:
        result['ImportsNbOrdinal'] = sum([entry.imports[i].ordinal for entry in pe.DIRECTORY_ENTRY_IMPORT for i in range(len(entry.imports)) if entry.imports[i].name is None])
    except Exception as e:
        print(f"Error: {e}")

    if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
        result['ExportNb'] = len(pe.DIRECTORY_ENTRY_EXPORT.symbols)
    else:
        print("Error: ExportNb problem")

    try:
        result['ResourcesNb'] = len(pe.DIRECTORY_ENTRY_RESOURCE.entries)
    except Exception as e:
        print(f"Error: {e}")
        
    resource_entropies = []
    resource_sizes = []
    try:
        for resource_type in pe.DIRECTORY_ENTRY_RESOURCE.entries:
            if hasattr(resource_type, 'directory'):
                for resource_id in resource_type.directory.entries:
                    if hasattr(resource_id, 'directory'):
                        for resource_lang in resource_id.directory.entries:
                            data = pe.get_data(resource_lang.data.struct.OffsetToData, resource_lang.data.struct.Size)
                            entropy = calculate_entropy(data)
                            resource_entropies.append(entropy)
                            resource_sizes.append(resource_lang.data.struct.Size)
        
        if len(resource_entropies) > 0:
            result['ResourcesMeanEntropy'] = sum(resource_entropies) / len(resource_entropies)
            result['ResourcesMinEntropy'] = min(resource_entropies)
            result['ResourcesMaxEntropy'] = max(resource_entropies)
            result['ResourcesMeanSize'] = sum(resource_sizes) / len(resource_sizes)
            result['ResourcesMinSize'] = min(resource_sizes)
            result['ResourcesMaxSize'] = max(resource_sizes)
        else:
            print("Error: Resource Entropy value is not greater than 0")

    except Exception as e:
        print(f"Error: {e}")
    
    if hasattr(pe, 'DIRECTORY_ENTRY_LOAD_CONFIG'):
        result['LoadConfigurationSize'] = pe.DIRECTORY_ENTRY_LOAD_CONFIG.struct.Size
    else:
        print("Error: LoadConfigurationSize error")
    
    try:
        result['VersionInformationSize'] = pe.DIRECTORY_ENTRY_RESOURCE.entries[0].directory.entries[0].directory.entries[0].data.struct.Size
    except Exception as e:
        print(f"Error: {e}")

    return result


def convert(filepath):
    result = extract_metadata(filepath)
    # ans = json.dumps(result, indent=4)
    # print(ans)

    try:
        dataFrame = pd.DataFrame(result, index=["Index"])
        dataFrame.to_csv('output.csv', index=False)
        print("Converted to CSV")
    except Exception as e:
        print(f"Error converting to CSV: {e}")

    return result

